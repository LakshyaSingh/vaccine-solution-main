{"componentChunkName":"component---src-pages-solution-orderms-index-mdx","path":"/solution/orderms/","result":{"pageContext":{"frontmatter":{"title":"Vaccine Order Management","description":"This microservice manage order for vaccine"},"relativePagePath":"/solution/orderms/index.mdx","titleType":"append","MdxNode":{"id":"39e4d6d6-82c5-546a-9eee-48c68a82c870","children":[],"parent":"8d6b2b86-339a-5bf2-b9e2-7b84e98d8630","internal":{"content":"---\ntitle: Vaccine Order Management\ndescription: This microservice manage order for vaccine\n---\n<PageDescription>\nThis microservice manages vaccine order for a world wide demand and distribution.\n</PageDescription>\n\n<AnchorLinks>\n  <AnchorLink>Overview</AnchorLink>\n  <AnchorLink>Build</AnchorLink>\n  <AnchorLink>Run</AnchorLink>\n  <AnchorLink>Usage Details</AnchorLink>\n</AnchorLinks>\n\n## Overview\n\nThis project implements a very simple event driven microservice to support the Create, Read, Update, and Delete of vaccine orders. The sale representative uses his mobile device to enter information about an order for a countries or a county within a country. \n\n ![](./images/vaccine-order-1.png)\n\nThe component writes to a database (DB2) all the order received, but also produce records to Blockchains and once the order is ready calls the Vaccine Order & Reefer Optimization service to get an updated schedule of vaccine lots to ship by airplane. At each order's state modification, events are sent to an event backbone.\n\nThe service is created from an [Appsody](https://appsody.dev/) stack and packaged as docker images, deployed on Openshift. The Event backbone is IBM Event Streams deliver as part of cloud pack for integration and installed via operator. This [video on the last event streams release](https://www.youtube.com/watch?v=nSza-RwvxSE) presents the installation process and the new capabilities.\n\n**Github repository:** [Vaccine-order-mgr](https://github.com/ibm-cloud-architecture/vaccine-order-mgr)\n\n**Order Life Cycle**\n\nThe order follows a set of states as described in the following diagram:\n\n ![](./images/vaccine-order-2.png)\n\n**Kafka topics produced to:**\n\nThe service produces to `orders` topic. Below is a representation of a Strimzi topic definition:\n\n```yaml\napiVersion: eventstreams.ibm.com/v1beta1\nkind: KafkaTopic\nmetadata:\n  name: orders\n  namespace: cp4i\nspec:\n  partitions: 3\n  replicas: 3\n  config:\n    retention.ms: 7200000\n    segment.bytes: 1073741824\n```\n\n**Events produced:**\n\nWe will simplify the process and aggregate in the following event types:\n\n* orderCreated\n* orderUpdated\n* orderCancelled\n* orderClosed\n\nSome events are related to the vaccine lot\n\n* lotAssignedToOrder\n* lotLoaded\n* lotDelivered\n\n## Build\n\nThis microservice is built using the [Appsody](https://appsody.dev/) development framework. The [Appsody CLI](https://appsody.dev/docs/installing/installing-appsody) is a required prerequisite for building the application locally.\n\nAppsody will build the application by pulling the contents of the Quarkus Appsody Stack it is based on and then performs the local application build inside the containerized environment:\n\n```shell\n# if not logged yes to your openshift cluster where the docker private registry resides do:\noc login --token=... --server=https://c...\n# Get the route to reach the docker private registry\noc get route --all-namespaces | grep registry\n# Define the path as environment variable\nexport IMAGE_REGISTRY=default-route-openshift-image-registry.gse-eda-demo-202005-fa9ee67c9ab6a7791435450358e564cc-0000.us-south.containers.appdomain.cloud\n# log to the docker registry using the security token from the openshift console\ndocker login $IMAGE_REGISTRY\n# Then build and push the image\nappsody build -t ibmcase/vaccine-order-mgr:0.0.1 [--push-url $IMAGE_REGISTRY] [--push]\n\n# IF you use dockerhub\nappsody build -t ibmcase/vaccine-order-mgr:0.0.1 --push --push-url docker.io\n```\n\n- You can optionally specify a container tag. If left blank, `latest` will be used.\n- You can optionally supply the `--push` flag to automatically push the built image to specified remote repository `--push-url`.\n\nPerforming an Appsody build will update the `app-deploy.yaml` file in the same directory with current information for the application image, labels, and annotations fields.\n\nThis file needs to be updated to include the different environment variables needed by the application:\n\n## Run\n\n### Pre requisites\n\nThe orders are persisted in an external DB2 instance running on IBM Cloud Pack for Data. You need to get the username and password to connect to the DB2 instance with the jdbc URL (something like jdbc:db2://dashdb-....:50001/BLUDB)\n\n### Deployment Parameters\n\nThe following deployment parameters are defined in the `app-deploy.yaml` file:\n\n| Name                                     | Required | Description                                                                                                            |\n|------------------------------------------|----------|------------------------------------------------------------------------------------------------------------------------|\n| KAFKA_BROKERS                            | YES      | Comma-separated list of Kafka brokers to connect to                                                                    |\n| KAFKA_APIKEY                             | NO       | API Key used to connect to SASL-secured Kafka brokers. This is required when connecting to IBM Event Streams clusters. |\n| TRUSTSTORE_ENABLED                       | NO       | Required to be set to `true` when connecting to IBM Event Streams on the IBM Cloud Pak for Integration (CP4I).         |\n| TRUSTSTORE_PATH                          | NO       | The local path to the required truststore file when connecting to IBM Event Streams on CP4I. See [**Volume Mounts**](#volume-mounts) below.  |\n| TRUSTSTORE_PWD                           | NO       | The password for the truststore file used for IBM Event Streams server verification. |\n| DBUSER | YES | Database user |\n| DBPWD | YES | Database user password |\n| SSLJDBCURL | YES | JDBC URL to connect to the database | \n\nYou can define a `.env` script to export the environment variables. \n\n### Run Locally\n\nWhen running the microservice locally you must specify all the required [deployment parameters](#deployment-parameters) environment variables. When using `appsody run` use the `--docker-options` flag being passed in from the Appsody CLI command. \nTwo options to start locally, one with quarkus, the other one with appsody\n\n**With Quarkus:**\n\n```shell\nsource ./scripts/setenv.sh\n./mvnw quarkus:dev\n```\n\n**With Appsody:** \n\n```shell\nsource ./scripts/setenv.sh\n\nappsody run --docker-options \"-e KAFKA_BROKERS=$KAFKA_BROKERS -e KAFKA_APIKEY=$KAFKA_APIKEY -e DBPWD=$DBPWD -e DBUSER=$DBUSER -e SSLJDBCURL=$SSLJDBCURL  -v $(pwd)/certs/es-cert.jks:/deployments/certs/es-cert.jks\"\n```\n\nFor more details on running the microservice locally, consult the Appsody run documentation as well as the deployment information contained in the app-deploy.yaml file.\n\n### Volume mounts\n\nThe order manager microservice requires up to one file to be injected at runtime for proper operation. As noted in the `TRUSTSTORE_PATH` parameter above, these files are SSL-based certificates which are required to verify the identity of the external service when calling it. These files are provided as `--docker-options \"-v host-src:container-dest ...\"` when running the microservice locally and as a Volume Mount when running the microservice on a Kubernetes cluster.\n\nThe `TRUSTSTORE_PATH` parameter is documented in the **Event Streams Certificates** section of the [Prerequisites](/microservices/prereqs/#ibm-event-streams-on-redhat-openshift-container-platform) page. The Appsody run command should include a parameter similar to `-v ./certs/es-cert.jks:/config/resources/security/es-cert.jks` in its `--docker-options` string to run this microservice locally.\n\n**Example:** `appsody run --docker-options \"-v /Users/myuser/Downloads/es-cert.jks:/config/resources/security/es-ssl/es-cert.jks\" ...`\n\n### Running on Openshift \n\n\n* Define a config map for the kafka brokers URL coming from the Event streams cluster connection panel:\n\n ![3](./images/es-cluster-connect.png)\n\n  ```shell\n  oc create configmap kafka-brokers --from-literal=brokers='es-cp4i-ibm-es-proxy-route-bootstrap-eventstreams-cp4i.gse-eda-demo-202005-fa9ee67c9ab6a7791435450358e564cc-0000.us-south.containers.appdomain.cloud:443' -n vaccine-cold-chain\n\n  ```\n\n* Define a secret for the event streams API key\n\n  ```shell\n  oc create secret generic es-cp4i-apikey --from-literal=binding='b77......tgMJZ' -n vaccine-cold-chain\n  ```\n\n* Add a secret for the java truststore, downloaded from Event Stream console or using the CLI `cloudctl es certificates --format jks`\n\n  ```shell\n  oc create secret generic es-truststore-jks --from-file=certs/es-cert.jks\n  ```\n\n* Modify the `app-deploy.yaml` to add environment variables and mount point.\n\n```yaml\n  env:\n    - name: KAFKA_BROKERS\n      valueFrom:\n        configMapKeyRef:\n          key: brokers\n          name: kafka-brokers\n    - name: KAFKA_APIKEY\n      valueFrom:\n        secretKeyRef:\n          key: binding\n          name: es-cp4i-apikey\n          optional: true\n    - name: CERT_LOCATION\n      value: /config/certs/truststore.jks\n```\n\n\nThe [Appsody Operator](https://appsody.dev/docs/reference/appsody-operator/) is a required prerequisite for deploying the microservice to a remote Kubernetes or OpenShift cluster. If the operator is not present in the current project, `appsody deploy... ` will add one.\n\nTo deploy the microservice to a remote cluster:\n\n```shell\n# Get the route to reach the docker private registry\noc get route --all-namespaces | grep registry\n# Define the path as environment variable\nexport IMAGE_REGISTRY=default-route-openshift-image-registry.gse-eda-demo-202005-fa9ee67c9ab6a7791435450358e564cc-0000.us-south.containers.appdomain.cloud\n# Deploy with appsody\n\nappsody deploy -t vaccine-cold-chain/vaccine-order-mgr:0.0.1 --push-url $IMAGE_REGISTRY --push --no-build --namespace vaccine-cold-chain\n```\n\n- You can omit the `--no-build` flag to have Appsody perform a build before deploying the application.\n- _**Note:**_ Performing a build at deploy time requires specifying the absolute container reference path, as well as the `--push` flag.\n- The neccesary deployment parameter information will be read from the `app-deploy.yaml` file in the same directory.\n\n## Usage Details\n\n### REST APIs\n\nThe REST end point for this service expose the following OpenAPI:\n\n ![4](./images/openapi.png)\n\n","type":"Mdx","contentDigest":"1aa73c44ec1979b7d8e05cdf25b4a908","counter":235,"owner":"gatsby-plugin-mdx"},"frontmatter":{"title":"Vaccine Order Management","description":"This microservice manage order for vaccine"},"exports":{},"rawBody":"---\ntitle: Vaccine Order Management\ndescription: This microservice manage order for vaccine\n---\n<PageDescription>\nThis microservice manages vaccine order for a world wide demand and distribution.\n</PageDescription>\n\n<AnchorLinks>\n  <AnchorLink>Overview</AnchorLink>\n  <AnchorLink>Build</AnchorLink>\n  <AnchorLink>Run</AnchorLink>\n  <AnchorLink>Usage Details</AnchorLink>\n</AnchorLinks>\n\n## Overview\n\nThis project implements a very simple event driven microservice to support the Create, Read, Update, and Delete of vaccine orders. The sale representative uses his mobile device to enter information about an order for a countries or a county within a country. \n\n ![](./images/vaccine-order-1.png)\n\nThe component writes to a database (DB2) all the order received, but also produce records to Blockchains and once the order is ready calls the Vaccine Order & Reefer Optimization service to get an updated schedule of vaccine lots to ship by airplane. At each order's state modification, events are sent to an event backbone.\n\nThe service is created from an [Appsody](https://appsody.dev/) stack and packaged as docker images, deployed on Openshift. The Event backbone is IBM Event Streams deliver as part of cloud pack for integration and installed via operator. This [video on the last event streams release](https://www.youtube.com/watch?v=nSza-RwvxSE) presents the installation process and the new capabilities.\n\n**Github repository:** [Vaccine-order-mgr](https://github.com/ibm-cloud-architecture/vaccine-order-mgr)\n\n**Order Life Cycle**\n\nThe order follows a set of states as described in the following diagram:\n\n ![](./images/vaccine-order-2.png)\n\n**Kafka topics produced to:**\n\nThe service produces to `orders` topic. Below is a representation of a Strimzi topic definition:\n\n```yaml\napiVersion: eventstreams.ibm.com/v1beta1\nkind: KafkaTopic\nmetadata:\n  name: orders\n  namespace: cp4i\nspec:\n  partitions: 3\n  replicas: 3\n  config:\n    retention.ms: 7200000\n    segment.bytes: 1073741824\n```\n\n**Events produced:**\n\nWe will simplify the process and aggregate in the following event types:\n\n* orderCreated\n* orderUpdated\n* orderCancelled\n* orderClosed\n\nSome events are related to the vaccine lot\n\n* lotAssignedToOrder\n* lotLoaded\n* lotDelivered\n\n## Build\n\nThis microservice is built using the [Appsody](https://appsody.dev/) development framework. The [Appsody CLI](https://appsody.dev/docs/installing/installing-appsody) is a required prerequisite for building the application locally.\n\nAppsody will build the application by pulling the contents of the Quarkus Appsody Stack it is based on and then performs the local application build inside the containerized environment:\n\n```shell\n# if not logged yes to your openshift cluster where the docker private registry resides do:\noc login --token=... --server=https://c...\n# Get the route to reach the docker private registry\noc get route --all-namespaces | grep registry\n# Define the path as environment variable\nexport IMAGE_REGISTRY=default-route-openshift-image-registry.gse-eda-demo-202005-fa9ee67c9ab6a7791435450358e564cc-0000.us-south.containers.appdomain.cloud\n# log to the docker registry using the security token from the openshift console\ndocker login $IMAGE_REGISTRY\n# Then build and push the image\nappsody build -t ibmcase/vaccine-order-mgr:0.0.1 [--push-url $IMAGE_REGISTRY] [--push]\n\n# IF you use dockerhub\nappsody build -t ibmcase/vaccine-order-mgr:0.0.1 --push --push-url docker.io\n```\n\n- You can optionally specify a container tag. If left blank, `latest` will be used.\n- You can optionally supply the `--push` flag to automatically push the built image to specified remote repository `--push-url`.\n\nPerforming an Appsody build will update the `app-deploy.yaml` file in the same directory with current information for the application image, labels, and annotations fields.\n\nThis file needs to be updated to include the different environment variables needed by the application:\n\n## Run\n\n### Pre requisites\n\nThe orders are persisted in an external DB2 instance running on IBM Cloud Pack for Data. You need to get the username and password to connect to the DB2 instance with the jdbc URL (something like jdbc:db2://dashdb-....:50001/BLUDB)\n\n### Deployment Parameters\n\nThe following deployment parameters are defined in the `app-deploy.yaml` file:\n\n| Name                                     | Required | Description                                                                                                            |\n|------------------------------------------|----------|------------------------------------------------------------------------------------------------------------------------|\n| KAFKA_BROKERS                            | YES      | Comma-separated list of Kafka brokers to connect to                                                                    |\n| KAFKA_APIKEY                             | NO       | API Key used to connect to SASL-secured Kafka brokers. This is required when connecting to IBM Event Streams clusters. |\n| TRUSTSTORE_ENABLED                       | NO       | Required to be set to `true` when connecting to IBM Event Streams on the IBM Cloud Pak for Integration (CP4I).         |\n| TRUSTSTORE_PATH                          | NO       | The local path to the required truststore file when connecting to IBM Event Streams on CP4I. See [**Volume Mounts**](#volume-mounts) below.  |\n| TRUSTSTORE_PWD                           | NO       | The password for the truststore file used for IBM Event Streams server verification. |\n| DBUSER | YES | Database user |\n| DBPWD | YES | Database user password |\n| SSLJDBCURL | YES | JDBC URL to connect to the database | \n\nYou can define a `.env` script to export the environment variables. \n\n### Run Locally\n\nWhen running the microservice locally you must specify all the required [deployment parameters](#deployment-parameters) environment variables. When using `appsody run` use the `--docker-options` flag being passed in from the Appsody CLI command. \nTwo options to start locally, one with quarkus, the other one with appsody\n\n**With Quarkus:**\n\n```shell\nsource ./scripts/setenv.sh\n./mvnw quarkus:dev\n```\n\n**With Appsody:** \n\n```shell\nsource ./scripts/setenv.sh\n\nappsody run --docker-options \"-e KAFKA_BROKERS=$KAFKA_BROKERS -e KAFKA_APIKEY=$KAFKA_APIKEY -e DBPWD=$DBPWD -e DBUSER=$DBUSER -e SSLJDBCURL=$SSLJDBCURL  -v $(pwd)/certs/es-cert.jks:/deployments/certs/es-cert.jks\"\n```\n\nFor more details on running the microservice locally, consult the Appsody run documentation as well as the deployment information contained in the app-deploy.yaml file.\n\n### Volume mounts\n\nThe order manager microservice requires up to one file to be injected at runtime for proper operation. As noted in the `TRUSTSTORE_PATH` parameter above, these files are SSL-based certificates which are required to verify the identity of the external service when calling it. These files are provided as `--docker-options \"-v host-src:container-dest ...\"` when running the microservice locally and as a Volume Mount when running the microservice on a Kubernetes cluster.\n\nThe `TRUSTSTORE_PATH` parameter is documented in the **Event Streams Certificates** section of the [Prerequisites](/microservices/prereqs/#ibm-event-streams-on-redhat-openshift-container-platform) page. The Appsody run command should include a parameter similar to `-v ./certs/es-cert.jks:/config/resources/security/es-cert.jks` in its `--docker-options` string to run this microservice locally.\n\n**Example:** `appsody run --docker-options \"-v /Users/myuser/Downloads/es-cert.jks:/config/resources/security/es-ssl/es-cert.jks\" ...`\n\n### Running on Openshift \n\n\n* Define a config map for the kafka brokers URL coming from the Event streams cluster connection panel:\n\n ![3](./images/es-cluster-connect.png)\n\n  ```shell\n  oc create configmap kafka-brokers --from-literal=brokers='es-cp4i-ibm-es-proxy-route-bootstrap-eventstreams-cp4i.gse-eda-demo-202005-fa9ee67c9ab6a7791435450358e564cc-0000.us-south.containers.appdomain.cloud:443' -n vaccine-cold-chain\n\n  ```\n\n* Define a secret for the event streams API key\n\n  ```shell\n  oc create secret generic es-cp4i-apikey --from-literal=binding='b77......tgMJZ' -n vaccine-cold-chain\n  ```\n\n* Add a secret for the java truststore, downloaded from Event Stream console or using the CLI `cloudctl es certificates --format jks`\n\n  ```shell\n  oc create secret generic es-truststore-jks --from-file=certs/es-cert.jks\n  ```\n\n* Modify the `app-deploy.yaml` to add environment variables and mount point.\n\n```yaml\n  env:\n    - name: KAFKA_BROKERS\n      valueFrom:\n        configMapKeyRef:\n          key: brokers\n          name: kafka-brokers\n    - name: KAFKA_APIKEY\n      valueFrom:\n        secretKeyRef:\n          key: binding\n          name: es-cp4i-apikey\n          optional: true\n    - name: CERT_LOCATION\n      value: /config/certs/truststore.jks\n```\n\n\nThe [Appsody Operator](https://appsody.dev/docs/reference/appsody-operator/) is a required prerequisite for deploying the microservice to a remote Kubernetes or OpenShift cluster. If the operator is not present in the current project, `appsody deploy... ` will add one.\n\nTo deploy the microservice to a remote cluster:\n\n```shell\n# Get the route to reach the docker private registry\noc get route --all-namespaces | grep registry\n# Define the path as environment variable\nexport IMAGE_REGISTRY=default-route-openshift-image-registry.gse-eda-demo-202005-fa9ee67c9ab6a7791435450358e564cc-0000.us-south.containers.appdomain.cloud\n# Deploy with appsody\n\nappsody deploy -t vaccine-cold-chain/vaccine-order-mgr:0.0.1 --push-url $IMAGE_REGISTRY --push --no-build --namespace vaccine-cold-chain\n```\n\n- You can omit the `--no-build` flag to have Appsody perform a build before deploying the application.\n- _**Note:**_ Performing a build at deploy time requires specifying the absolute container reference path, as well as the `--push` flag.\n- The neccesary deployment parameter information will be read from the `app-deploy.yaml` file in the same directory.\n\n## Usage Details\n\n### REST APIs\n\nThe REST end point for this service expose the following OpenAPI:\n\n ![4](./images/openapi.png)\n\n","fileAbsolutePath":"/home/runner/work/vaccine-solution-main/vaccine-solution-main/docs/src/pages/solution/orderms/index.mdx"}}}}